#!/usr/bin/env python3

import argh
from argh import arg
import glob
import os
import json
import subprocess

@arg('umbrella_path', help='The top-level directory under which any git repository should be pushed to its pushRemote.')
def shove(umbrella_path):
    errors = {}
    successes = []
    for repo in subprocess.check_output("find " + umbrella_path + " -name '.git' -type d -exec dirname \{\} \\;", shell=True, encoding='utf-8').strip().split('\n'):
        # lots of dependency managers will check out a repo in a subdirectory, which we consider read-only; don't try to push them
        is_repo_process = subprocess.Popen(['git', 'rev-parse', '--is-inside-work-tree'], cwd=os.path.dirname(repo), stdout=subprocess.DEVNULL,  stderr=subprocess.DEVNULL)
        is_repo_process.communicate()
        if is_repo_process.returncode == 0:
            check_ignore_process = subprocess.Popen(['git', 'check-ignore', repo], cwd=os.path.dirname(repo), stdout=subprocess.DEVNULL,  stderr=subprocess.DEVNULL)
            check_ignore_process.communicate()
            if check_ignore_process.returncode == 0:
                continue

            has_unpushed_commits = int(subprocess.check_output(['git', 'rev-list', '@..@{u}', '--count'], cwd=os.path.dirname(repo), encoding='utf-8').strip()) != 0
            if not has_unpushed_commits:
                continue

        process = subprocess.Popen(['git', 'push'], cwd=repo, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        stdout, stderr = process.communicate()
        if process.returncode != 0:
            errors[repo] = stderr.decode('utf-8')
        else:
            successes.append(repo)
    if len(successes) > 0:
        print(f'pushed:\n{successes}')
    if len(errors) > 0:
        print(json.dumps(errors, indent=4))

parser = argh.ArghParser()
parser.add_commands([shove])

if __name__ == '__main__':
    parser.dispatch()
